

workflows:
  version: 2
  build-and-deploy:
    jobs:
      # - build
      # - webapp
      # - webapp1
      - cpp
      - csharp

defaults: &defaults
    docker:
      - image: circleci/openjdk:8u131-jdk

    environment:
      TZ: "/usr/share/zoneinfo/Asia/Tokyo"
      # branch version
      BUILD_VERSION: "1.0.0"

    working_directory: ~/source-all

    branches:
      only:
        - /develop\/.*/


version: 2
jobs:
  webapp:
    <<: *defaults

    steps:
      - checkout

      - run: 
          name: build
          command: mvn -B -f webapp/pom.xml clean package findbugs:findbugs pmd:pmd -Dbuild.number=${CIRCLE_BUILD_NUM} -Pdeploy -Dmaven.test.skip=true

      - run: 
          name: deploy
          command: |
            git clone https://github.com/public-test-circleci/module-all.git
            cd module-all
            git checkout release/${BUILD_VERSION}
            cd ..
            cp webapp/appExample01/target/appExample01.war module-all/webapp/
            cp webapp/appExample02/target/appExample02.war module-all/webapp/
            cd module-all
            git config --global user.email ${CIRCLE_USERNAME}@local.test
            git config --global user.name ${CIRCLE_USERNAME}
            git commit -am "deploy from CircleCI(Number:${CIRCLE_BUILD_NUM})"
            git push origin release/${BUILD_VERSION}


  webapp1:
    <<: *defaults

    steps:
      - checkout

      - run: 
          name: build
          command: mvn -B -f webapp1/pom.xml clean package findbugs:findbugs pmd:pmd -Dbuild.number=${CIRCLE_BUILD_NUM} -Pdeploy -Dmaven.test.skip=true

      - run: 
          name: deploy
          command: |
            git clone https://github.com/public-test-circleci/module-all.git
            cd module-all
            git checkout release/${BUILD_VERSION}
            cd ..
            cp webapp1/app1Example01/target/app1Example01.war module-all/webapp1/
            cp webapp1/app1Example02/target/app1Example02.war module-all/webapp1/
            cd module-all
            git config --global user.email ${CIRCLE_USERNAME}@local.test
            git config --global user.name ${CIRCLE_USERNAME}
            git commit -am "deploy from CircleCI(Number:${CIRCLE_BUILD_NUM})"
            git push origin release/${BUILD_VERSION}

  cpp:
    docker:
      - image: microsoft/dotnet:1.0.5-sdk-jessie

    environment:
      TZ: "/usr/share/zoneinfo/Asia/Tokyo"

    working_directory: ~/source-all

    branches:
      only:
        - /develop\/.*/

    steps:
      - checkout

      - run: 
          name: build
          command: |
            cd native-cpp
            dotnet msbuild /t:Rebuild /p:Configuration=Release Lambda_VS2013.sln
            pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'


  csharp:
    docker:
      - image: microsoft/dotnet:1.0.5-sdk-jessie

    environment:
      TZ: "/usr/share/zoneinfo/Asia/Tokyo"

    working_directory: ~/source-all

    branches:
      only:
        - /develop\/.*/

    steps:
      - checkout

      - run: 
          name: build
          command: |
            cd native-csharp
            dotnet msbuild /t:Rebuild /p:Configuration=Release MethodHidingInCSharp.sln
            pwd;find . | sort | sed '1d;s/^\.//;s/\/\([^/]*\)$/|--\1/;s/\/[^/|]*/|  /g'

